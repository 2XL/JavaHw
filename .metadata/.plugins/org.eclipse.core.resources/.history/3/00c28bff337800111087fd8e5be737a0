package TADs;


import java.util.Vector;


public class LinkedListS<Elem, Code> extends LinkedList<Elem, Code> {

	// 1r element fantasma
	private Vector<NodeS<Elem, Code>> info;	// usa un element
	private int SL=0;		// posicio seguent lliure	Vector[SL]
	private int P=0;		// posicio del primer element de la lista... virtual
	private int U=midaMax;	// posicio ultim del vector... virtual
	
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	
	public LinkedListS(int midaM){		// estatica amb mida maxima... inicialitzar els variables
		midaMax = midaM;
		numElems=0;
		
		info = new Vector<NodeS<Elem, Code>>(midaMax);	
		
		
		for (int i=0; i<midaMax;i++)		// 
		{
			
		   info.insertElementAt(new NodeS<Elem, Code>(), i);		// inicialitzar les instancies de nodes
		 
		   // fer que els punters apuntin inicialment al seguent index del vector
		
			// inicialitzar un linkers de seguents lliures
		   info.elementAt(i).s=i+1;							// inicialitzar els anteriors
		   info.elementAt(i).a=i-1;
		   
		}
		
		info.elementAt(0).a=midaMax;
		info.elementAt(midaMax).s=0;		// llista doblement enllaçada circular...
		
		
	}
	
	
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	
	public boolean addElement(Code code, Elem e) {
		if(numElems==midaMax)		// comprovar si existeix lloc lliure
		{
			System.out.println("EstaPLE");	// surt perque pila plena
			return false;									
		}
		else
		{
			if(getElement(code)!=null)		// repetido
				return false;
			
/////////////////////////////////////////			
			
			info.elementAt(SL).c = code;		// actualitzar codi
			info.elementAt(SL).e = e;			// actualitzar element
			SL = info.elementAt(SL).s;			// actualitzar seguent lliure
			numElems++;			// actualitza el nombre d'elements
			
// amb aixo hiha prou per generar una llista
			
		}
		return true;	
	}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
		
	public boolean removeElement(Code code) {	// amb aixo crec que hauria de funcionar borrar
		
		// quan elimino l'element el trec d'entre dos i l'inseto entre l'ultim i el primer
		
		
		int i, j=P;
		for (i=0; i<numElems;i++)			// j es la posicio actual
			{	// determinar si l'element ja existia
					// se actualitza seguent casella
				if(info.elementAt(j).c.equals(code))	// si existeix caldra borrar-lo
				{
					int seg, ant;
					seg = info.elementAt(j).s;
					ant = info.elementAt(j).a;
					
					info.elementAt(ant).s =seg;
					info.elementAt(seg).a =ant;
					
					info.elementAt(j).s=P;
					info.elementAt(j).a=U;
					
					info.elementAt(U).s=j;
					info.elementAt(P).a=j;
					//trobat
					
					U = j;	// el ultim paso a ser jo
					numElems--;	// actualitzar el nombre d'elements que hiha
					return true;
				}
				j=info.elementAt(j).s;		// comprovar el seguent
			}								
			

		// no trobat
		return false;
	}
	
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	
	// OPERACIONS CONSULTORES
	

	public Elem getLast() 	// retorna l'ultim element insertat.
	{
		if(numElems!=0)
		return info.elementAt(info.elementAt(SL).a).e;
		return null;
	}
	
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	public Elem getElement(Code code) 	// mirar si existeix una serie especificat amb el parra metre
	{
		int i=0,j=P;
		for (i=0; i<numElems;i++)			// j es la posicio actual
			{	// determinar si l'element ja existia
				if(info.elementAt(j).c.equals(code))	// en cas de trobat retorna l'element
					return info.elementAt(j).e;
				j=info.elementAt(j).s;		// se actualitza seguent casella
			}
		return null;						// surt perque no s'ha trobat
		
	}
	
	
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	public Vector<NodeS<Elem, Code>> getElements() 
	{	// retorna una llista amb tots els elements que hiha a la lista
		if(numElems==0)
		return null;
		else
		{
			
		// si hiha elements aleshores caldra inicialitzar un vector d'elements
			Vector<NodeS<Elem, Code>> llista;	// llista un node element code
			
			llista = new Vector<NodeS<Elem, Code>>(numElems);		// inicialitzar un vector de elements code
			
			int i,j=P;
			for (i=0; i<numElems;i++)		// 
			{
				
			   llista.insertElementAt(new NodeS<Elem, Code>(), i);		// inicialitzar les instancies de nodes
			 
			   // fer que els punters apuntin inicialment al seguent index del vector
			
				// inicialitzar un linkers de seguents lliures
			   info.elementAt(i).s=i+1;							// inicialitzar els anteriors
			   info.elementAt(i).a=i-1;
			   
			   llista.elementAt(i).c = info.elementAt(j).c;	
			   llista.elementAt(i).e = info.elementAt(j).e;
			   j=info.elementAt(j).s;
			   // la i fa falta fer res suposu perque esta cabadada de crear...
			   
			}
			
			llista.elementAt(0).a=numElems;
			llista.elementAt(numElems).s=0;		// llista doblement enllaçada circular...
					
			// ara caldra insertar els objectes correspoenents
	// de la llista d'info a la llista que acabem de crear
		
			return llista;				// amb aixo hauria de retornar una llista de elements actuals ...
		}
	
	}
	
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	


	
	
	// a l'hora de treballar a la implementacio estatica:
		// lo ideal:
	
			// 1 - CONSULTAR
				// omplir tota la memoria del vector amb
				// objectes de tipus Node_linked_List
				// que estiguin buits
// i despres accediu a aquests espais en les altres operacions.
	// es a dir, que quan heu de afegir node, no haureu de fer mai un n= new Node,
	// sino, simplement trobar una posicio buida i marcarla com ocupada i guardar-hi les dades
	// quan feu un esborar node el que heu de fer es marcar la posicio com a lliure
	// pero per eliminar el node no sirve...
	
	
	
	
}
