package TADsHash;

//import java.util.Vector;

import java.util.Vector;

import TADsGeneric.*;

public class HashTable< Elem, Code>{	// taula de hashing genèric
//						hash code - user - Linkedlist dinamic

	// ATRIBUTS
	
	int dimT;	// mida maxima del taulell es a dir la taula de hashing
	int numU;	// numero de usuaris que hiha
	
	Vector<LinkedListD<Elem, Code>> T;
	
	// matriu linkedlist dinamic

	
	
	
	// CONSTRUCTOR
	public HashTable (int mida)
	{
		
			
		// crea una estructura de hash table, sense cap element
		 T = new Vector<LinkedListD<Elem, Code>>(mida);	// vector amb mida!
		// inicialitzar T com a vector de vectors
		
		
		for(int i=0;i<mida;i++)
			{
			//T.elementAt(i) = new LinkedListD<Elem, Code>(mida);
			
			T.insertElementAt(new LinkedListD<Elem, Code>(mida), i);
			System.out.println("Elements "+i);
			}
				// amb la mida d'elements que li passem per parametre
		dimT = mida;
		numU = 0;	// num usuari


		

		
	}
	
	public void addElement( Code clau, Elem ele)// afegir usuari amb el codi 
	{					// String	/	user
		
		int c;
									// cridar la funcio de hash
		c = HashFuntion(clau, dimT);	// tenir la clau
		
		 
		if(T.elementAt(c).getElement(clau)==null)
		{
			T.elementAt(c).addElement(clau, ele);
			numU++;
		}else
			System.out.println("L'usuari ja existeix!");
		
		 
		 
		// haig de introduir un user en la columna c i user es un node de vector
			// carregar ... i insertar
		
		
		// afegeix un nou element a la taula en el lloc que li pertoca segons la funcio de hash
		// cal comprovar si l'element existia
	
		
	}
	
	public void removeElement(Code clau)
	{
		int c;
		// cridar la funcio de hash
		c = HashFuntion(clau, dimT);	// tenir la clau
		
		// es buida o ocupada?
		T.elementAt(c).removeElement(clau);// obtenim el node de la taula
		numU--;
		// aquesta operacio elimina de la taula l'element identificat per la clau que passem per parametre.
		// dona error si l'element que esborrem no es troba a la llista
	}
	
	
	// CONSULTORES
	public boolean isEmpty()
	{
		// retorna false si hiha algun element a la taula 
		return numU==0;
	}
	
	public Elem getElement(Code clau)
	{
		int c;
		c = HashFuntion(clau,dimT);
		// aquesta, retorna l'element corresponent a la clau que passem com a parametre.
		// dona error, si no hi ha cap element identificadt per la clau.
		
		return T.elementAt(c).getElement(clau);
	}
	
	
	
	
	
	
	
	
	// tots els nodes de usuaris amb els correus
	public Vector<Node<Elem, Code>> getElementss()	// retorna tots USERS(Usuari)
	{
		Vector<Node<Elem, Code>> aux = new Vector<Node<Elem, Code>>(numU);
		// retorna tots els elements de la taula de hash
		for(int i=0; i<dimT;i++)
		{
			if(!T.elementAt(i).isEmpty())
			{// si no esta vuit recercar usuaris
				aux.addAll(T.elementAt(i).getElements());
			}
		}
		return aux;
	}
	
	
	public Vector<Elem> getElements()				// retorna tots USERS(Usuari)
	{
		
		// retorna una llista amb totes usuaris que hi ha a la taula.
		// dona error si no hiha cap usuari.
		Vector<Node<Elem, Code>> aux = new Vector<Node<Elem, Code>>(numU);
		
		aux = getElementss();
		
		Vector<Elem> aux2 = new Vector<Elem>(numU);
		for(int i=0;i<numU;i++)
		aux2.insertElementAt(aux.elementAt(i).e, i);
		
		return aux2;
	}
	
	public Vector<Code> getClaus()				// retorna tots CODE(correu)
	{
		
		// retorna una llista amb totes les claus que hi ha a la taula.
		// dona error si no hih a cap clau.
		Vector<Node<Elem, Code>> aux = new Vector<Node<Elem, Code>>(numU);
		
		aux = getElementss();
		
		Vector<Code> aux2 = new Vector<Code>(numU);
		for(int i=0;i<numU;i++)
		aux2.insertElementAt(aux.elementAt(i).c, i);
		
		return aux2;
	}
	
	
	
	
	
	
	public float getLoadFactor()
	{
		// retorna el factor de carrega =
		// numero d'elements/ capacitat del sistema.
		return numU/dimT;
	}
	
	public int HashFuntion(Code correo, int midamax)
	{
		int c;
		c = correo.hashCode()%midamax;
		/*
			int clau=(correo.length() * (int)correo.charAt(0)); 
			int mida;
			mida = correo.length();
			for (int i=0; i<mida; i++)
			{		clau = clau % midamax;
					clau = (i^3) + (clau*correo.charAt(i)) ;
			}
			
		*/
		
		
		System.out.println("HASH CODE ->"+c);
		if(c<0)
			c= dimT+c;
		System.out.println("Code   " +c);
		
		
			return c;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
